var express = require('express');
var bodyParser = require('body-parser');
var router = express.Router();
var pool = require('../config/connect');
var session = require('express-session');
var cookieParser = require('cookie-parser');
var twilio = require('twilio');
var client = new twilio('AC38c360080cfddb271554c355c83f542d', 'b6ee2e5869d7ac3268dbdbbabfb54ab7');
var accStatus = 0;
var nodemailer = require('nodemailer');
var session = require('express-session');
var piblaster = require('pi-servo-blaster.js');
var piblaster2 = require('pi-servo-blaster.js');

var app = express();
var http = require('http').Server(router);
var io = require('socket.io')(http);

var Gpio = require('onoff').Gpio;
var LED1 = new Gpio(4, 'out'); 
var LED2 = new Gpio(17, 'out');
var sent = 0; 

var myData = '';

router.use(session({ secret: '12teqwgds687t97fsersfgk', cookie: { maxAge: 600000 }}))
 
router.get('/API/turnOn:ToDo', function(req, res) {

	if (req.params.ToDo)
	{
		let lightNum = req.params.ToDo;
		if (lightNum == '1')
		{
			console.log('ON');
			//LED1.writeSync(1);
			return res.status(200).send('1 ON');
		} else if (lightNum == '2')
		{
			console.log('ON');
			//LED2.writeSync(1);
			return res.status(200).send('2 ON');
		}
	} else {
		return res.status(400).send('Something went wrong while attempting to switch on light');
	}
});

router.get('/API/turnOff:ToDo', function(req, res) {

	if (req.params.ToDo)
	{
		let lightNum = req.params.ToDo;
		if (lightNum == '1')
		{
			console.log('OFF');
			LED1.writeSync(0);
			return res.status(200).send('1 OFF');
		} else if (lightNum == '2')
		{
			console.log('OFF');
			LED2.writeSync(0);
			return res.status(200).send('2 OFF');
		}
	} else {
		return res.status(400).send('Something went wrong while attempting to switch off light');
	}
});

router.get('/API/openWindow:ToDo', function(req, res) {

	if (req.params.ToDo)
	{
		let windowNum = req.params.ToDo;
		if (windowNum == '1')
		{
			//openWindow(windowNum, req, res);
			//Check for CLOESED...
			//req.session.currAngle1
			if (!req.session.currAngle2)
			{
				req.session.currAngle2 = 0;
			}

			if (!req.session.currAngle)
			{
				req.session.currAngle = 0;
			}
			
			if (req.session.currAngle == 0 || req.session.currAngle == 45)
			{	
				console.log('NOT OPEN AT ALL ' + req.session.currAngle1);
				openAT90(windowNum, req, res);
			} else {
				console.log('DO NOTHING');
			}
			
			//console.log('OFF');
			//req.session.currAngle 
		//	LED1.writeSync(0);
		//	return res.status(200).send('1 OFF');
		} else if (windowNum == '2')
		{	
			openWindow(windowNum, req, res);
			console.log('OFF');
			//LED2.writeSync(0);
			//return res.status(200).send('2 OFF');
		}
	} else {
		return res.status(400).send('Something went wrong while attempting to open window');
	}
});

router.get('/API/closeWindow:ToDo', function(req, res) {

	if (req.params.ToDo)
	{
		let windowNumber = req.params.ToDo;
		
		if (windowNumber == '1')
		{//closeWindow(val, req, res)
			closeWindow(windowNumber, req, res);
		} else if (windowNumber == '2')
		{
			
		} 
		
	} else {
		return res.status(400).send('Something went wrong while attempting to open window');
	}
});

function noOPen(windowNum, req, res)
{

	let direction = 1; 
	let curAngle = req.session.currAngle3;
	
	if (req.session.currAngle3 == 0 && req.session.currAngle2 == 0 && req.session.currAngle1 == 0)
	{
		curAngle = 45;
	} else if (req.session.currAngle3 == 0 && req.session.currAngle2 == 0 && req.session.currAngle1 > 0)
	{
		curAngle = req.session.currAngle1;
	} else if (req.session.currAngle1 == 0 && req.session.currAngle2 == 0 && req.session.currAngle3 > 0)
	{
		curAngle = req.session.currAngle3;
	} else if (req.session.currAngle1 == 0 && req.session.currAngle3 == 0 && req.session.currAngle2 > 0)
	{
		curAngle = req.session.currAngle2;
	}

	let refreshId = setInterval(() => {
		//console.log('Session for angle 1 ' + req.session.currAngle1 + ' 2 ' + req.session.currAngle2 + '  ' + req.session.currAngle3);
		
		piblaster.setServoPwm("P1-12", angleToPercent(curAngle) + "%");
		clearInterval(refreshId);
		return;
		}, 10);
	 
}

function openAT90(val, req, res)
{
	let curAngle = 45;
	let direction = 1;
	let sent1 = 0;
	
	if (req.session.currAngle == 90)
	{ 
		curAngle = 90;
		return res.status(200).send({angle: curAngle, angleMessage: '45 deg open'});
	}
	
	if (val == '1')
	{
		let refreshId = setInterval(() => {
			//console.log('Session for angle 1 ' + req.session.currAngle1 + ' 2 ' + req.session.currAngle2 + '  ' + req.session.currAngle3);
			console.log('AT START')
			piblaster.setServoPwm("P1-12", angleToPercent(curAngle) + "%");
			//console.log('Session for angle 1 ' + req.session.currAngle1 + ' 2 ' + req.session.currAngle2 + '  ' + req.session.currAngle3);
			//console.log("Setting angle at: ", curAngle, angleToPercent(curAngle));
			curAngle += direction;
			req.session.closed = 0;

			// Change direction when it exceeds the max angle.
			if (curAngle >= 90 && curAngle < 135) {
				req.session.currAngle = 90;
				direction = 0;
				clearInterval(refreshId);	
			} else if (curAngle <= 45) {
				direction = 0;
			}
		
			sent = 1;
			if (curAngle == 90 && sent1 == 0)
			{	
				sent1 = 1;
				return res.status(200).send({angle: curAngle, angleMessage: '45 deg open'});
			}
			
			}, 10);
	}	
}

function open180AT(val, req, res)
{
	let curAngle = 135;
	let direction = 1;
	let sent3 = 0;
	
}

function open135AT(val, req, res)
{
	let curAngle = 90;
	let direction = 1;
	let sent = 0;
		
	if (req.session.currAngle == 135)
	{ 
		curAngle = 135;
		sent = 1;
		return res.status(200).send({angle: curAngle, angleMessage: '45 deg open'});
	}
	
	if (val == '1')
	{
		let refreshId = setInterval(() => {
			//console.log('Session for angle 1 ' + req.session.currAngle1 + ' 2 ' + req.session.currAngle2 + '  ' + req.session.currAngle3);
			console.log('AT START')
			piblaster.setServoPwm("P1-12", angleToPercent(curAngle) + "%");
			//console.log('Session for angle 1 ' + req.session.currAngle1 + ' 2 ' + req.session.currAngle2 + '  ' + req.session.currAngle3);
			//console.log("Setting angle at: ", curAngle, angleToPercent(curAngle));
			curAngle += direction;
			req.session.closed = 0;

			// Change direction when it exceeds the max angle.
			if (curAngle >= 135 && curAngle < 180) {
				req.session.currAngle = 135;
				direction = 0;
				clearInterval(refreshId);	
			} else if (curAngle <= 90) {
				direction = 0;
			}
		
			//sent = 1;
			if (curAngle == 135 && sent == 0)
			{	
				sent = 1;
				return res.status(200).send({angle: curAngle, angleMessage: '45 deg open'});
			}
			
			}, 10);
		}
}

function closeWindow(val, req, res)
{
	
	let direction = 1; 
	let curAngle = req.session.currAngle;
	let closed = 0;

	if (curAngle <= 45)
	{
		console.log(
		'IZ SET');
		closed = 1;
		//req.session.currAngle = 0;
		return res.status(200).send({angle: curAngle, angleMessage: '45 deg open'});
	}
	 
	if (val == '1')
	{
		let id = setInterval(() => {
				
				piblaster2.setServoPwm("P1-12", angleToPercent(curAngle) + "%");
				//console.log('Session for angle 1 ');
				//console.log("Setting angle at: ", curAngle, angleToPercent(curAngle));
				
				if (curAngle > 45)
				{
					curAngle -= direction;
				}
			
				// Change direction when it exceeds the max angle.
				if (curAngle <= 45) {
					req.session.currAngle = 45;
					//req.session.currAngle1 = undefined;
					//clearInterval(id);
					//closed = 1;
					direction = 0;
					clearInterval(id);
				} 
					
					if (curAngle <= 45 && closed == 0)
					{
						console.log('IN CLOSING');
						//NGYAYIVALA LANA
						closed = 1;
						//closed = req.session.closed;
						//NGYAYIVALA LANA

						req.session.currAngle1 = 0;
						req.session.currAngle2 = 0;
						req.session.currAngle3 = 0;
						console.log('AT END')
						return res.status(200).send({angle: curAngle, angleMessage: '45 deg open'});
					} 
					//clearInterval(refreshId);	
				
				}, 10);
	}
}

function angleToPercent(angle) {

	return Math.floor((angle/180) * 100);  
}

module.exports = router;
